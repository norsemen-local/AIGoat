name: 'Terraform Apply'

on:
  workflow_dispatch:

permissions: write-all

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-1"

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0  # Set to the latest stable version

    - name: Set Account ID
      id: account
      run: |
        echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

    - name: Create S3 bucket for Terraform state
      run: |
        BUCKET_NAME="aigoat-state-files-${ACCOUNT_ID}"
        if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
          echo "Creating S3 bucket: $BUCKET_NAME"
          aws s3api create-bucket --bucket "$BUCKET_NAME" --region $AWS_REGION
        else
          echo "S3 bucket already exists: $BUCKET_NAME"
        fi

    - name: Check for existing Terraform state file
      id: check_state
      run: |
        if aws s3api head-object --bucket "aigoat-state-files-${ACCOUNT_ID}" --key terraform.tfstate 2>/dev/null; then
          echo "State file exists. Using existing state."
          echo "STATE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "No state file found. Creating a new deployment."
          echo "STATE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Terraform Init and Apply
      run: |
        set -e  # Exit on any failure

        # Retrieve existing state if it exists
        if [[ "$STATE_EXISTS" == "true" ]]; then
          aws s3 cp s3://aigoat-state-files-${ACCOUNT_ID}/terraform.tfstate ./terraform.tfstate || true
        fi

        # Initialize Terraform
        terraform init
        
        # Plan Terraform changes
        terraform plan -input=false

        # Apply Terraform changes
        terraform apply -auto-approve -input=false

    - name: Display Terraform Outputs
      run: |
        BUCKET_URL=$(terraform output -raw bucket_url || echo "No bucket_url output")
        BACKEND_IP=$(terraform output -raw backend_ip || echo "No backend_ip output")
        echo "Bucket URL: $BUCKET_URL"
        echo "Backend IP: $BACKEND_IP"

    - name: Upload Terraform State to S3
      if: always()
      run: |
        if [ -f "terraform.tfstate" ]; then
          aws s3 cp ./terraform.tfstate s3://aigoat-state-files-${ACCOUNT_ID}/terraform.tfstate
        else
          echo "No Terraform state file found. Skipping upload."
        fi
